//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Resources/Input/Player Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Input"",
    ""maps"": [
        {
            ""name"": ""Character Base Mode"",
            ""id"": ""25e134d6-25e9-44d9-9666-96e2376fff4b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""02c63dc9-b935-4749-a41f-ddaf44d17123"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Charge"",
                    ""type"": ""Button"",
                    ""id"": ""18f8d43f-1945-4add-b91b-c29d13eae9f8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""27555b03-5c0c-4bb9-8828-975fb800df02"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""2ee4d16a-c80e-42ed-98fa-ee33f19e77d2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0b8cbb6d-2a44-4772-84bf-7d3b00af3103"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Character"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""90795275-95a9-42ed-88a3-8759b2ea925c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Character"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""28c559a8-6c71-40c6-a883-e5f5c84a40e8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Character"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5004001e-e05a-402a-9923-2f9e7fd8a879"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Character"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b842adf3-290b-4ce3-a36b-6c2c55c150dc"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Character"",
                    ""action"": ""Charge"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbf45a17-b06f-4dd0-9502-97c817b67c28"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Character"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Character Stealth Mode"",
            ""id"": ""8f52acc4-131a-4f3d-8839-7a88e8be404f"",
            ""actions"": [
                {
                    ""name"": ""Squat"",
                    ""type"": ""Button"",
                    ""id"": ""ad301c7d-719e-44e9-8481-7a38dde72739"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Battle Mode"",
                    ""type"": ""Button"",
                    ""id"": ""3ffc65de-5f61-4457-81dc-c7cc5d7e8700"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a5aabd16-d7e1-4cd8-ba75-7cd9be7ff37b"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Character"",
                    ""action"": ""Squat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a34d25a1-a01e-4d0a-9404-e62a6e7af8b2"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Character"",
                    ""action"": ""Battle Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Character Battle Mode"",
            ""id"": ""6beb91dd-9a57-45de-a157-240e3cb2e269"",
            ""actions"": [
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""ffb45d8c-6f61-45d7-afd4-5a256a016e05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""946f6eee-2ca8-4375-9df3-911c4816f44a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""00990788-77e6-417f-a8d1-e6402eee29c3"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Character"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4298c0f9-f1b3-4ec2-8779-c0670be01aa8"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Character"",
            ""bindingGroup"": ""Character"",
            ""devices"": []
        }
    ]
}");
        // Character Base Mode
        m_CharacterBaseMode = asset.FindActionMap("Character Base Mode", throwIfNotFound: true);
        m_CharacterBaseMode_Move = m_CharacterBaseMode.FindAction("Move", throwIfNotFound: true);
        m_CharacterBaseMode_Charge = m_CharacterBaseMode.FindAction("Charge", throwIfNotFound: true);
        m_CharacterBaseMode_Interact = m_CharacterBaseMode.FindAction("Interact", throwIfNotFound: true);
        // Character Stealth Mode
        m_CharacterStealthMode = asset.FindActionMap("Character Stealth Mode", throwIfNotFound: true);
        m_CharacterStealthMode_Squat = m_CharacterStealthMode.FindAction("Squat", throwIfNotFound: true);
        m_CharacterStealthMode_BattleMode = m_CharacterStealthMode.FindAction("Battle Mode", throwIfNotFound: true);
        // Character Battle Mode
        m_CharacterBattleMode = asset.FindActionMap("Character Battle Mode", throwIfNotFound: true);
        m_CharacterBattleMode_Reload = m_CharacterBattleMode.FindAction("Reload", throwIfNotFound: true);
        m_CharacterBattleMode_Shoot = m_CharacterBattleMode.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Character Base Mode
    private readonly InputActionMap m_CharacterBaseMode;
    private List<ICharacterBaseModeActions> m_CharacterBaseModeActionsCallbackInterfaces = new List<ICharacterBaseModeActions>();
    private readonly InputAction m_CharacterBaseMode_Move;
    private readonly InputAction m_CharacterBaseMode_Charge;
    private readonly InputAction m_CharacterBaseMode_Interact;
    public struct CharacterBaseModeActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterBaseModeActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CharacterBaseMode_Move;
        public InputAction @Charge => m_Wrapper.m_CharacterBaseMode_Charge;
        public InputAction @Interact => m_Wrapper.m_CharacterBaseMode_Interact;
        public InputActionMap Get() { return m_Wrapper.m_CharacterBaseMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterBaseModeActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterBaseModeActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterBaseModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterBaseModeActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Charge.started += instance.OnCharge;
            @Charge.performed += instance.OnCharge;
            @Charge.canceled += instance.OnCharge;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(ICharacterBaseModeActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Charge.started -= instance.OnCharge;
            @Charge.performed -= instance.OnCharge;
            @Charge.canceled -= instance.OnCharge;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(ICharacterBaseModeActions instance)
        {
            if (m_Wrapper.m_CharacterBaseModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterBaseModeActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterBaseModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterBaseModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterBaseModeActions @CharacterBaseMode => new CharacterBaseModeActions(this);

    // Character Stealth Mode
    private readonly InputActionMap m_CharacterStealthMode;
    private List<ICharacterStealthModeActions> m_CharacterStealthModeActionsCallbackInterfaces = new List<ICharacterStealthModeActions>();
    private readonly InputAction m_CharacterStealthMode_Squat;
    private readonly InputAction m_CharacterStealthMode_BattleMode;
    public struct CharacterStealthModeActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterStealthModeActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Squat => m_Wrapper.m_CharacterStealthMode_Squat;
        public InputAction @BattleMode => m_Wrapper.m_CharacterStealthMode_BattleMode;
        public InputActionMap Get() { return m_Wrapper.m_CharacterStealthMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterStealthModeActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterStealthModeActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterStealthModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterStealthModeActionsCallbackInterfaces.Add(instance);
            @Squat.started += instance.OnSquat;
            @Squat.performed += instance.OnSquat;
            @Squat.canceled += instance.OnSquat;
            @BattleMode.started += instance.OnBattleMode;
            @BattleMode.performed += instance.OnBattleMode;
            @BattleMode.canceled += instance.OnBattleMode;
        }

        private void UnregisterCallbacks(ICharacterStealthModeActions instance)
        {
            @Squat.started -= instance.OnSquat;
            @Squat.performed -= instance.OnSquat;
            @Squat.canceled -= instance.OnSquat;
            @BattleMode.started -= instance.OnBattleMode;
            @BattleMode.performed -= instance.OnBattleMode;
            @BattleMode.canceled -= instance.OnBattleMode;
        }

        public void RemoveCallbacks(ICharacterStealthModeActions instance)
        {
            if (m_Wrapper.m_CharacterStealthModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterStealthModeActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterStealthModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterStealthModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterStealthModeActions @CharacterStealthMode => new CharacterStealthModeActions(this);

    // Character Battle Mode
    private readonly InputActionMap m_CharacterBattleMode;
    private List<ICharacterBattleModeActions> m_CharacterBattleModeActionsCallbackInterfaces = new List<ICharacterBattleModeActions>();
    private readonly InputAction m_CharacterBattleMode_Reload;
    private readonly InputAction m_CharacterBattleMode_Shoot;
    public struct CharacterBattleModeActions
    {
        private @PlayerInput m_Wrapper;
        public CharacterBattleModeActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Reload => m_Wrapper.m_CharacterBattleMode_Reload;
        public InputAction @Shoot => m_Wrapper.m_CharacterBattleMode_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_CharacterBattleMode; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterBattleModeActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterBattleModeActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterBattleModeActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterBattleModeActionsCallbackInterfaces.Add(instance);
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(ICharacterBattleModeActions instance)
        {
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(ICharacterBattleModeActions instance)
        {
            if (m_Wrapper.m_CharacterBattleModeActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterBattleModeActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterBattleModeActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterBattleModeActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterBattleModeActions @CharacterBattleMode => new CharacterBattleModeActions(this);
    private int m_CharacterSchemeIndex = -1;
    public InputControlScheme CharacterScheme
    {
        get
        {
            if (m_CharacterSchemeIndex == -1) m_CharacterSchemeIndex = asset.FindControlSchemeIndex("Character");
            return asset.controlSchemes[m_CharacterSchemeIndex];
        }
    }
    public interface ICharacterBaseModeActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnCharge(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface ICharacterStealthModeActions
    {
        void OnSquat(InputAction.CallbackContext context);
        void OnBattleMode(InputAction.CallbackContext context);
    }
    public interface ICharacterBattleModeActions
    {
        void OnReload(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
